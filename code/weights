# Load necessary libraries
library(dplyr)
library(survey)
library(srvyr)

# 1: Prepare Data
# Filter data for analysis
data_for_analysis_senior <- data_for_analysis %>%
  filter((ranking != "junior") %>% replace_na(TRUE)) %>%
  filter(INTENT_EXIT_2 > 0 | PROJECT_EFFORT > 0 | PROJECT_VOICE > 0)

# Create standardized columns for ranking and education
data_for_analysis_senior <- data_for_analysis_senior %>%
  mutate(
    ranking_standardized = ifelse(ranking == "middle", "middle", "senior_or_very_senior"),
    education_standardized = ifelse(
      education %in% c("high-school", "other"), "high-school", as.character(education)
    ),
    education_standardized = factor(
      education_standardized,
      levels = c("high-school", "bachelor", "master", "phd")
    )
  )

# 2: Filter sample data
filtered_sample_data <- data_for_analysis_senior %>%
  filter(ranking %in% c("middle", "senior", "very senior"))

# 3: Calculate Population and Sample Proportions
# Read population statistics
pop_statistics <- readRDS("C:\\Users\\nirko\\Dropbox\\Civil Servants' Perceptions of Democratic Decline\\Code\\Operationalization & CFA\\pop_statistics.rds")
pop_gender <- pop_statistics$gender_proportions
pop_age <- pop_statistics$age_proportions
pop_ranking <- pop_statistics$ranking_proportions
pop_tenure <- pop_statistics$tenure_proportions
pop_education <- pop_statistics$education_proportions

pop_education <- pop_education[c("high school", "bachelor", "master", "phd")]
names(pop_education) <- c("high-school", "bachelor", "master", "phd")

# Sample proportions
sample_gender <- prop.table(table(filtered_sample_data$gender))
sample_age <- prop.table(table(filtered_sample_data$age))
sample_tenure <- prop.table(table(filtered_sample_data$tenure))

sample_ranking <- prop.table(table(filtered_sample_data$ranking_standardized))
sample_education <- prop.table(table(filtered_sample_data$education_standardized))

# Calculate weights for each variable
weight_gender <- pop_gender / sample_gender
weight_age <- pop_age / sample_age
weight_ranking <- pop_ranking / sample_ranking
weight_tenure <- pop_tenure / sample_tenure
weight_education <- pop_education / sample_education

# 4: Create Weights for Combinations
# Combine weights into a single dataset
weights_df <- filtered_sample_data %>%
  group_by(gender, age, ranking_standardized, tenure, education_standardized) %>%
  summarise(n_sample = n(), .groups = 'drop') %>%
  mutate(percent_sample = n_sample / sum(n_sample)) %>%
  left_join(
    expand.grid(
      gender = names(pop_gender),
      age = names(pop_age),
      ranking = names(pop_ranking),
      tenure = names(pop_tenure),
      education = names(pop_education)
    ) %>%
      mutate(
        percent_pop = pop_gender[gender] *
          pop_age[age] *
          pop_ranking[ranking] *
          pop_tenure[tenure] *
          pop_education[education]
      ),
    by = c("gender", "age", "ranking_standardized" = "ranking", "tenure", "education_standardized" = "education")
  ) %>%
  mutate(weight = percent_pop / percent_sample)

# 5: Add Weights to Original Dataset
data_for_analysis_senior <- data_for_analysis_senior %>%
  left_join(
    weights_df %>% select(gender, age, ranking_standardized, tenure, education_standardized, weight),
    by = c("gender", "age", "ranking_standardized", "tenure", "education_standardized")
  )

# 6: Handle Missing Weights
data_for_analysis_senior <- data_for_analysis_senior %>% filter(!is.na(weight))

# 7: Create Survey Design Object
survey_design <- data_for_analysis_senior %>%
  as_survey_design(weights = weight)

# 8: Run Weighted Models
# Example: OLS for Politicization and Influence
politicization_mod1 <- svyglm(
  PROJECT_POLITICIZATION ~ BACKSLIDING_2 + PAST_POLITICIZATION + PAST_INFLUENCE,
  design = survey_design
)

influence_mod1 <- svyglm(
  PROJECT_INFLUENCE ~ BACKSLIDING_2 + PAST_POLITICIZATION + PAST_INFLUENCE,
  design = survey_design
)

# 9: Output Results
sjPlot::tab_model(
  politicization_mod1, influence_mod1,
  show.est = F,
  show.ci = F,
  show.se = T,
  show.std = T,
  collapse.se = T,
  emph.p = F,
  string.est = "B",
  string.std = "Beta",
  string.pred = " ",
  string.intercept = "Intercept",
  pred.labels = predictor_labels,
  dv.labels = c("Expected politicization", "Expected influence"),
  order.terms = c(2:4, 1)
)

# 10: Models for exit, voice, and work intentions using survey weights
# Exit intention model
exit_mod1 <- svyglm(
  INTENT_EXIT_2 ~ BACKSLIDING_2 + PAST_POLITICIZATION + PAST_INFLUENCE,
  design = survey_design
)

exit_mod2 <- svyglm(
  INTENT_EXIT_2 ~ BACKSLIDING_2 + PAST_POLITICIZATION + PAST_INFLUENCE + PROJECT_POLITICIZATION + PROJECT_INFLUENCE,
  design = survey_design
)

# Voice intention model
voice_mod1 <- svyglm(
  PROJECT_VOICE ~ BACKSLIDING_2 + PAST_POLITICIZATION + PAST_INFLUENCE + PAST_VOICE,
  design = survey_design
)

voice_mod2 <- svyglm(
  PROJECT_VOICE ~ BACKSLIDING_2 + PAST_POLITICIZATION + PAST_INFLUENCE + PAST_VOICE + PROJECT_POLITICIZATION + PROJECT_INFLUENCE,
  design = survey_design
)

# Work effort intention model
work_mod1 <- svyglm(
  PROJECT_EFFORT ~ BACKSLIDING_2 + PAST_POLITICIZATION + PAST_INFLUENCE + PAST_EFFORT,
  design = survey_design
)

work_mod2 <- svyglm(
  PROJECT_EFFORT ~ BACKSLIDING_2 + PAST_POLITICIZATION + PAST_INFLUENCE + PAST_EFFORT + PROJECT_POLITICIZATION + PROJECT_INFLUENCE,
  design = survey_design
)

# Tabulate the results
sjPlot::tab_model(
  exit_mod1, exit_mod2,
  voice_mod1, voice_mod2,
  work_mod1, work_mod2,
  show.est = F,
  show.ci = F,
  show.se = T,
  show.std = T,
  collapse.se = T,
  emph.p = F,
  string.est = "B",
  string.std = "Beta",
  string.pred = " ",
  string.intercept = "Intercept",
  pred.labels = predictor_labels,
  dv.labels = rep(c("Exit intention", "Voice intention", "Work effort intention"), each = 2),
  order.terms = c(2, 5:6, 3:4, 7:8, 1)
)

